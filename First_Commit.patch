Index: GameObject.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- GameObject.cpp	(revision )
+++ GameObject.cpp	(revision )
@@ -0,0 +1,16 @@
+//
+// Created by dani on 06/06/17.
+//
+
+#include "GameObject.h"
+
+
+GameObject::GameObject(int x, int y, sf::Sprite goSprite, sf::Texture goTexture): posX(x), posY(y), texture(goTexture),
+                                                                                  sprite(goSprite){}
+
+
+
+
+
+
+
Index: Level.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Level.h	(revision )
+++ Level.h	(revision )
@@ -0,0 +1,34 @@
+//
+// Created by dani on 06/06/17.
+//
+
+#ifndef BAT_JUMP_PROJECT_LEVEL_H
+#define BAT_JUMP_PROJECT_LEVEL_H
+
+
+#include <SFML/Graphics/Texture.hpp>
+#include <bits/unique_ptr.h>
+#include "GameObject.h"
+
+class Level {
+public:
+    Level(const sf::Texture background, int difficulty, double points, int height,
+           std::vector<GameObject*> gameObjectPtr);
+    float calculateDensity();
+    void updateLevel();
+    void removeGameObject(GameObject &gameObject);
+    void addGameObject(GameObject &gameObject);
+    void drawLevel();
+
+
+private:
+    sf::Texture background;
+    int difficulty;
+    double points;
+    int height;
+    std::vector<GameObject*> gameObjectPtr;
+
+};
+
+
+#endif //BAT_JUMP_PROJECT_LEVEL_H
Index: GameObject.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- GameObject.h	(revision )
+++ GameObject.h	(revision )
@@ -0,0 +1,59 @@
+//
+// Created by dani on 06/06/17.
+//
+
+#ifndef BAT_JUMP_PROJECT_GAMEOBJECT_H
+#define BAT_JUMP_PROJECT_GAMEOBJECT_H
+
+
+#include <SFML/Graphics/Sprite.hpp>
+#include <SFML/Graphics/Texture.hpp>
+
+class GameObject {
+public:
+    GameObject(int x, int y, sf::Sprite goSprite, sf::Texture goTexture);
+    virtual void onCollision(GameObject &gameObject)=0;
+    virtual void move(int x, int y)=0;
+
+    int getPosX() const {
+        return posX;
+    }
+
+    void setPosX(int posX) {
+        GameObject::posX = posX;
+    }
+
+    int getPosY() const {
+        return posY;
+    }
+
+    void setPosY(int posY) {
+        GameObject::posY = posY;
+    }
+
+    const sf::Sprite &getSprite() const {
+        return sprite;
+    }
+
+    void setSprite(const sf::Sprite &sprite) {
+        GameObject::sprite = sprite;
+    }
+
+    const sf::Texture &getTexture() const {
+        return texture;
+    }
+
+    void setTexture(const sf::Texture &texture) {
+        GameObject::texture = texture;
+    }
+
+
+protected:
+    int posX,posY;
+    sf::Sprite sprite;
+    sf::Texture texture;
+
+};
+
+
+#endif //BAT_JUMP_PROJECT_GAMEOBJECT_H
Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.cpp	(revision )
+++ main.cpp	(revision )
@@ -0,0 +1,7 @@
+#include <iostream>
+#include <SFML/Graphics.hpp>
+
+int main() {
+
+    return 0;
+}
\ No newline at end of file
Index: CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CMakeLists.txt	(revision )
+++ CMakeLists.txt	(revision )
@@ -0,0 +1,17 @@
+cmake_minimum_required(VERSION 3.6)
+project(Bat_jump_project)
+
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules" ${CMAKE_MODULE_PATH})
+set(SFML_ROOT "${CMAKE_SOURCE_DIR}/SFML-2.4.2")
+set(SOURCE_FILES main.cpp main.cpp GameObject.cpp GameObject.h Level.cpp Level.h)
+
+add_executable(Bat_jump_project ${SOURCE_FILES})
+
+
+find_package(SFML COMPONENTS graphics window system network audio REQUIRED)
+
+if(SFML_FOUND)
+    target_include_directories(Bat_jump_project PUBLIC ${SFML_INCLUDE_DIR})
+    target_link_libraries(Bat_jump_project ${SFML_LIBRARIES})
+endif()
\ No newline at end of file
Index: Level.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Level.cpp	(revision )
+++ Level.cpp	(revision )
@@ -0,0 +1,13 @@
+//
+// Created by dani on 06/06/17.
+//
+
+#include "Level.h"
+
+Level::Level(const sf::Texture background, int difficulty, double points, int height,
+              std::vector<GameObject*> gameObjectPtr) : background(background),
+                                                                              difficulty(difficulty), points(points),
+                                                                              height(height),
+                                                                              gameObjectPtr(gameObjectPtr) {}
+
+
